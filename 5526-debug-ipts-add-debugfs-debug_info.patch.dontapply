Add debugfs to see m2h_msg and h2m_msg.

diff --git a/drivers/misc/ipts/ipts-dbgfs.c b/drivers/misc/ipts/ipts-dbgfs.c
index 1c5c92f..91f3d4d 100644
--- a/drivers/misc/ipts/ipts-dbgfs.c
+++ b/drivers/misc/ipts/ipts-dbgfs.c
@@ -19,10 +19,18 @@
 #include "ipts.h"
 #include "ipts-sensor-regs.h"
 #include "ipts-msg-handler.h"
+#include "ipts-mei-msgs.h"
 #include "ipts-state.h"
 
 const char sensor_mode_fmt[] = "sensor mode : %01d\n";
 const char ipts_status_fmt[] = "sensor mode : %01d\nipts state : %01d\n";
+const char ipts_debug_info_fmt[] = "m2h_msg.status : %d\n\
+m2h_msg.command_code : 0x%x\n\
+device_info.vendor_id : 0x%x\n\
+device_info.device_id : 0x%x\n\
+device_info.fw_rev : 0x%x\n\
+h2m_msg.command_code : 0x%x\n\
+";
 
 static ssize_t ipts_dbgfs_mode_read(struct file *fp, char __user *ubuf,
 						size_t cnt, loff_t *ppos)
@@ -112,6 +120,36 @@ static const struct file_operations ipts_status_dbgfs_fops = {
         .llseek = generic_file_llseek,
 };
 
+static ssize_t ipts_dbgfs_debug_info_read(struct file *fp, char __user *ubuf,
+						size_t cnt, loff_t *ppos)
+{
+	ipts_info_t *ipts = fp->private_data;
+	char debug_info[256];
+	int len = 0;
+
+	if (cnt < sizeof(ipts_debug_info_fmt) - 3)
+		return -EINVAL;
+
+	len = scnprintf(debug_info, 256, ipts_debug_info_fmt,
+						     ipts->m2h_msg.status,
+						     ipts->m2h_msg.command_code,
+						     ipts->device_info.vendor_id,
+						     ipts->device_info.device_id,
+						     ipts->device_info.fw_rev,
+						     ipts->h2m_msg.command_code
+						     );
+	if (len < 0)
+		return -EIO;
+
+	return simple_read_from_buffer(ubuf, cnt, ppos, debug_info, len);
+}
+
+static const struct file_operations ipts_debug_info_dbgfs_fops = {
+        .open = simple_open,
+        .read = ipts_dbgfs_debug_info_read,
+        .llseek = generic_file_llseek,
+};
+
 void ipts_dbgfs_deregister(ipts_info_t* ipts)
 {
 	if (!ipts->dbgfs_dir)
@@ -143,6 +181,13 @@ int ipts_dbgfs_register(ipts_info_t* ipts, const char *name)
                 goto err;
         }
 
+        f = debugfs_create_file("debug_info", S_IRUSR, dir,
+                                ipts, &ipts_debug_info_dbgfs_fops);
+        if (!f) {
+                ipts_err(ipts, "debugfs debug_info creation failed\n");
+                goto err;
+        }
+
 	ipts->dbgfs_dir = dir;
 
 	return 0;
diff --git a/drivers/misc/ipts/ipts-mei.c b/drivers/misc/ipts/ipts-mei.c
index 199e49c..fa053b0 100644
--- a/drivers/misc/ipts/ipts-mei.c
+++ b/drivers/misc/ipts/ipts-mei.c
@@ -151,6 +151,9 @@ static int ipts_mei_cl_event_thread(void *data)
 		if (ipts_handle_resp(ipts, &m2h_msg, msg_len) != 0) {
 			ipts_err(ipts, "error in handling resp msg\n");
 		}
+		
+		ipts->m2h_msg.status = m2h_msg.status;
+		ipts->m2h_msg.command_code = m2h_msg.command_code;
 	}
 
 	ipts_dbg(ipts, "!! end event loop !!\n");
diff --git a/drivers/misc/ipts/ipts-msg-handler.c b/drivers/misc/ipts/ipts-msg-handler.c
index 8b214f9..4502184 100644
--- a/drivers/misc/ipts/ipts-msg-handler.c
+++ b/drivers/misc/ipts/ipts-msg-handler.c
@@ -25,6 +25,8 @@ int ipts_handle_cmd(ipts_info_t *ipts, u32 cmd, void *data, int data_size)
 		return ret;
 	}
 
+	ipts->h2m_msg.command_code = cmd;
+
 	return 0;
 }
 
diff --git a/drivers/misc/ipts/ipts.h b/drivers/misc/ipts/ipts.h
index 1fcd021..e70c62c 100644
--- a/drivers/misc/ipts/ipts.h
+++ b/drivers/misc/ipts/ipts.h
@@ -108,6 +108,8 @@ typedef struct ipts_info {
 	ipts_state_t	state;
 
 	touch_sensor_mode_t	sensor_mode;
+	touch_sensor_msg_m2h_t m2h_msg;
+	touch_sensor_msg_h2m_t h2m_msg;
 	touch_sensor_get_device_info_rsp_data_t device_info;
 	ipts_resource_t	resource;
 	u8		hid_input_report[HID_MAX_BUFFER_SIZE];
